@model Employee

@{
    ViewData["Title"] = $"{Model.FullName} - Attendance Report";
    var fromDate = ViewBag.FromDate as DateTime? ?? DateTime.Today.AddDays(-30);
    var toDate = ViewBag.ToDate as DateTime? ?? DateTime.Today;
}

<div class="card">
    <div class="card-header bg-primary text-white">
        <div class="d-flex justify-content-between align-items-center">
            <h4 class="mb-0">
                <i class="fas fa-user-clock"></i> @Model.FullName - Attendance Report
            </h4>
            <div>
                <form method="get" class="form-inline">
                    <div class="form-group mr-2">
                        <input type="date" name="fromDate" value="@fromDate.ToString("yyyy-MM-dd")" class="form-control form-control-sm">
                    </div>
                    <div class="form-group mr-2">
                        <input type="date" name="toDate" value="@toDate.ToString("yyyy-MM-dd")" class="form-control form-control-sm">
                    </div>
                    <button type="submit" class="btn btn-light btn-sm">
                        <i class="fas fa-filter"></i> Filter
                    </button>
                </form>
            </div>
        </div>
    </div>

    <div class="card-body">
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-light">
                    <div class="card-body text-center">
                        <h6 class="card-title">Employee ID</h6>
                        <p class="card-text">@Model.EmployeeId</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-light">
                    <div class="card-body text-center">
                        <h6 class="card-title">Email</h6>
                        <p class="card-text">@Model.Email</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-light">
                    <div class="card-body text-center">
                        <h6 class="card-title">Department</h6>
                        <p class="card-text">@Model.Department?.Name</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-light">
                    <div class="card-body text-center">
                        <h6 class="card-title">Join Date</h6>
                        <p class="card-text">@Model.JoinDate.ToString("dd MMM yyyy")</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-bordered table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>Date</th>
                        <th>Day</th>
                        <th>Check In</th>
                        <th>Check Out</th>
                        <th>Working Hours</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var date in EachDay(fromDate, toDate))
                    {
                        var attendance = Model.Attendances.FirstOrDefault(a => a.CheckIn.Date == date.Date);
                        <tr>
                            <td>@date.ToString("dd MMM yyyy")</td>
                            <td>@date.ToString("ddd")</td>
                            <td>@(attendance?.CheckIn.ToString("hh:mm tt") ?? "-")</td>
                            <td>@(attendance?.CheckOut?.ToString("hh:mm tt") ?? "-")</td>
                            <td>
                                @if (attendance?.CheckOut != null)
                                {
                                    var duration = attendance.CheckOut.Value - attendance.CheckIn;
                                    @($"{duration.Hours}h {duration.Minutes}m")
                                }
                                else
                                {
                                    @("-")
                                }
                            </td>
                            <td>
                                <span class="badge @GetStatusBadgeClass(attendance?.Status ?? AttendanceStatus.Absent)">
                                    @(attendance?.Status.ToString() ?? "Absent")
                                </span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@functions {
    public IEnumerable<DateTime> EachDay(DateTime from, DateTime thru)
    {
        for (var day = from.Date; day.Date <= thru.Date; day = day.AddDays(1))
            yield return day;
    }

    public string GetStatusBadgeClass(AttendanceStatus status)
    {
        switch (status)
        {
            case AttendanceStatus.Present:
                return "bg-success";
            case AttendanceStatus.Late:
                return "bg-warning";
            case AttendanceStatus.Absent:
                return "bg-danger";
            case AttendanceStatus.OnLeave:
                return "bg-info";
            default:
                return "bg-secondary";
        }
    }
}