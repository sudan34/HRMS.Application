@model IEnumerable<Attendance>

@{
    ViewData["Title"] = "Attendance Records";
}

<div class="card">
    <div class="card-header bg-primary text-white">
        <div class="row align-items-center">
            <div class="col-md-6">
                <h4><i class="fas fa-calendar-check"></i> Attendance Records</h4>
            </div>
            <div class="col-md-6 d-flex justify-content-end">
                <form method="get" class="row g-2">
                    <div class="col-auto">
                        <label class="col-form-label">From:</label>
                    </div>
                    <div class="col-auto">
                        <input type="date" name="fromDate" value="@ViewBag.FromDate.ToString("yyyy-MM-dd")" class="form-control form-control-sm">
                    </div>
                    <div class="col-auto">
                        <label class="col-form-label">To:</label>
                    </div>
                    <div class="col-auto">
                        <input type="date" name="toDate" value="@ViewBag.ToDate.ToString("yyyy-MM-dd")" class="form-control form-control-sm">
                    </div>
                    <div class="col-auto">
                        <button type="submit" class="btn btn-light btn-sm">
                            <i class="fas fa-filter"></i> Filter
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="card-body">
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <div class="mb-4 d-flex justify-content-between">
            <form method="post" asp-action="SyncWithDevice" id="syncForm">
                <button type="submit" class="btn btn-success" id="syncButton">
                    <i class="fas fa-sync-alt"></i>
                    <span id="syncText">Sync with Device</span>
                    <span id="syncSpinner" class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                </button>
            </form>

            <a href="@Url.Action("ExportToExcel", new { fromDate = ViewBag.FromDate, toDate = ViewBag.ToDate })" class="btn btn-info ">
                <i class="fas fa-file-excel"></i> Export to Excel
            </a>
        </div>

        <div class="table-responsive">
            <table class="table table-bordered table-hover table-striped" id="attendanceTable">
                <thead class="table-dark">
                    <tr>
                        <th>Employee</th>
                        <th>Date</th>
                        <th>Check In</th>
                        <th>Check Out</th>
                        <th>Working Hours</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="bg-light rounded-circle me-2 p-1 text-center" style="width:40px; height:40px; line-height:30px;">
                                        <span class="fw-bold">@item.Employee.FirstName[0]@item.Employee.LastName[0]</span>
                                    </div>
                                    <div>
                                        <h6 class="mb-0">@item.Employee.FirstName @item.Employee.LastName</h6>
                                        <small class="text-muted">@item.Employee.EmployeeId</small>
                                    </div>
                                </div>
                            </td>
                            <td>@item.CheckIn.ToString("dd MMM yyyy")</td>
                            <td>@item.CheckIn.ToString("hh:mm tt")</td>
                            <td>@(item.CheckOut?.ToString("hh:mm tt") ?? "-")</td>
                            <td>
                                @if (item.CheckOut.HasValue)
                                {
                                    var duration = item.CheckOut.Value - item.CheckIn;
                                    @($"{duration.Hours}h {duration.Minutes}m")
                                }
                                else
                                {
                                    @("-")
                                }
                            </td>
                            <td>
                                <span class="badge @GetStatusBadgeClass(item.Status)">
                                    @item.Status
                                </span>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary edit-btn"
                                        data-id="@item.Id">
                                    <i class="fas fa-edit"></i>
                                </button>

                                @* <button class="btn btn-sm btn-outline-primary"
                                        data-bs-toggle="modal"
                                        data-bs-target="#editModal"
                                        data-id="@item.Id">
                                    <i class="fas fa-edit"></i>
                                </button> *@

                                @* <button class="btn btn-sm btn-outline-primary"
                                        data-bs-toggle="modal"
                                        data-bs-target="#editModal"
                                        data-id="@item.Id"
                                        data-checkin="@item.CheckIn.ToString("yyyy-MM-ddTHH:mm")"
                                        data-checkout="@item.CheckOut?.ToString("yyyy-MM-ddTHH:mm")"
                                        data-status="@item.Status">
                                    <i class="fas fa-edit"></i>
                                </button> *@
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div id="editModalContainer"></div>
<!-- Edit Modal -->


@section Scripts {
    <!-- SweetAlert2 CDN -->
    @* <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> *@

    <script>
        $(document).ready(function () {
             var table = $('#attendanceTable').DataTable({
                responsive: true,
                dom: '<"top"lf>rt<"bottom"ip>',
                pageLength: 25
            });

            // var editModal = document.getElementById('editModal');
            // editModal?.addEventListener('show.bs.modal', function (event) {
            //     var button = event.relatedTarget;
            //     var id = button.getAttribute('data-id');

            $(document).on('click', '.edit-btn', function() {
                var id = $(this).data('id');

                // Load the partial view via AJAX
                $.get('@Url.Action("GetAttendanceForEdit", "Attendance")', { id: id }, function(data) {
                    $('#editModalContainer').html(data);
                    var modal = new bootstrap.Modal(document.getElementById('editModal'));
                    modal.show();
                });
            });

            $('#syncForm').submit(function(e) {
                e.preventDefault();

                let seconds = 0;
                const timerInterval = setInterval(() => {
                    seconds++;
                }, 1000);

                Swal.fire({
                    title: 'Syncing with Device',
                    html: 'Please wait while we sync attendance data...<br><br>Elapsed time: <span id="syncTimer">0</span> seconds',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();

                        // Update the timer every second
                    const timerElement = document.getElementById('syncTimer');
                    const timerUpdate = setInterval(() => {
                        timerElement.textContent = seconds;
                    }, 1000);

                        // Submit the form programmatically
                        $.ajax({
                            url: $(this).attr('action'),
                            method: 'POST',
                            success: function(response) {
                                clearInterval(timerInterval);
                                clearInterval(timerUpdate);
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Sync Complete',
                                    html: `Attendance data has been successfully synced!<br><br>Total time: ${seconds} seconds`
                                }).then(() => {
                                    window.location.reload();
                                });
                            },
                            error: function() {
                                clearInterval(timerInterval);
                                clearInterval(timerUpdate);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Sync Failed',
                                    html: `There was an error syncing with the device<br><br>Elapsed time: ${seconds} seconds`
                                });
                            }
                        });
                    }
                });
            });
        });
    </script>
}

@functions {
    public string GetStatusBadgeClass(AttendanceStatus status)
    {
        return status switch
        {
            AttendanceStatus.Present => "bg-success",
            AttendanceStatus.Late => "bg-warning text-dark",
            AttendanceStatus.Absent => "bg-danger",
            AttendanceStatus.OnLeave => "bg-info text-dark",
            _ => "bg-secondary"
        };
    }
}
